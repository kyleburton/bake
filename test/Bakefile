#!/bin/bash
set -eu

TEST_NAME=".none."
TESTS=""

function bake_test () {
  local tname desc
  tname="$1"
  desc="${2:-}"

  bake_task "$tname" "$desc"
  TESTS="$TESTS $tname"
}

function in_test () {
  TEST_NAME="$1"
}

# @help.01_find_bakefile_sets_absolute_path|Unit test.
# @help.01_find_bakefile_sets_absolute_path|Tests that BAKEFILE is a file.
# @help.01_find_bakefile_sets_absolute_path|Tests that $(bake_bakefile_dir)/BAKEFILE is a file.
bake_test 01_find_bakefile_sets_absolute_path "assert bake_bakefile_dir is the absolute path to BAKEFILE"
function 01_find_bakefile_sets_absolute_path () {
  in_test "$FUNCNAME"
  cd lib
  test -f "$BAKEFILE"
  test -f "$(bake_bakefile_dir)/Bakefile"
  cd ..
}

# @help.02_bake_cd|Tests that bake_cd changes the PWD to the directory where the Bakefile is.
bake_test 02_bake_cd "directory helper to set PWD to the location of the Bakefile"
function 02_bake_cd () {
  cd lib
  bake_cd
  test -f Bakefile || exit 1
  bake_cd lib
  test -f ../Bakefile || exit 1
}

# @help.03_bake_looks_up_directory_tree|Assert that `bake` will traverse up the directory tree in order
# @help.03_bake_looks_up_directory_tree|to find the Bakefile.
bake_test 03_bake_looks_up_directory_tree "find the Bakefile in a parent directory."
function 03_bake_looks_up_directory_tree () {
  bake_cd
  pwd
  cd sub/dir/a/b/c/
  if bake_find_bakefile_impl; then
    bake_echo_green "OK: found Bakefile from $(pwd)"
  else
    bake_echo_red "ERROR: did not find Bakefile from $(pwd)"
    return 1
  fi

  cd /tmp/
  if bake_find_bakefile_impl; then
    return 1
  else
    bake_echo_green "OK: did not find Bakefile from $(pwd)"
  fi
  bake_cd
}

# @help.04_require_all|test that bake_require_all loads all of the files in a directory.
bake_test 04_require_all "require all the files in a directory."
function 04_require_all () {
  bake_require_all lib/
  bar_task
}

bake_test 05_looks_like_url
function 05_looks_like_url () {
  local non_urls="lib/foo.sh nothing another.thing README.md some/directory/path gist.github.com/kyleburton/1234"
  local urls="http://github.com/kyleburton/bake/packages/vim/vim-go https://github.com/kyleburton/bake/packages/vim/vim-go github.com/kyleburton/bake/packages/vim/vim-go"
  for thing in $non_urls; do
    if bake_looks_like_url "$thing"; then
      bake_echo_red "Expected $thing to not bake_looks_like_url, but it did"
      return 1
    fi
  done

  for thing in $urls; do
    if ! bake_looks_like_url "$thing"; then
      bake_echo_red "Expected $thing to bake_looks_like_url, but it didn't"
      return 1
    fi
  done
}

bake_test 06_remote_require
function 06_remote_require () {
  bake_package_install github.com/kyleburton/bake/packages/bake/internal/test.sh
  bake_require github.com/kyleburton/bake/packages/bake/internal/test.sh
  bake_echo_test "remote require successful"
}

bake_test 07_echo_colors
function 07_echo_colors () {
  echo "Testing terminal colors"
  bake_echo_red       "This should be red text"
  bake_echo_lred      "This should be 'light' red text"
  bake_echo_blue      "This should be blue text"
  bake_echo_lblue     "This should be 'light' blue text"
  bake_echo_green     "This should be green text"
  bake_echo_lgreen    "This should be 'light' green text"
  bake_echo_yellow    "This should be yellow text"
  bake_echo_lgray     "This should be 'light' gray text"
  bake_echo_dgray     "This should be 'dark' gray text"
  bake_echo_cyan      "This should be cyan text"
  bake_echo_lcyan     "This should be 'light' cyan text"
  bake_echo_magenta   "This should be magenta text"
  bake_echo_lmagenta  "This should be 'light' magenta text"

  echo             -n "On One Line: "
  bake_echo_red    -n "red"
  bake_echo_lred   -n " and lred"
  bake_echo_blue   -n " and blue"
  bake_echo_lblue  -n " and lblue"
  bake_echo_green  -n " and green"
  bake_echo_lgreen -n " and lgreen"
  echo " and the end of the line"
}

bake_task 08_catch_failed_require
function 08_catch_failed_require () {
  bake_echo_green "NB: this test actually exits, so it can't be part of the normal suite."
  bake_echo_green "You should see a RED message 'I fail on require' and a message indicating where the error occurred, and then no more"
  bake_require lib2/fail-on-require.sh
  bake_echo_green "This is after the require, if you see this then the test failed."
}

bake_test 09_test_bakepath
function 09_test_bakepath () {
  bake_echo_green "This tests that setting a Bakepath works appropriately"
  BAKEPATH="$PWD/lib" ../bake 09_test_bakepath_helper
  bake_echo_green "This is after the require, if you see this then the test succeeded."
}

# @help.09_test_bakepath|Test that we can load libraries from the BAKEPATH
bake_task 09_test_bakepath_helper "Called by the associated test"
function 09_test_bakepath_helper () {
  bake_echo_green "This should be called with the BAKEPATH=\"$PWD\"/lib by the associated test"
  bake_require lib/mylib.sh
  bake_require mylib.sh
}

bake_test 10_test_bakepath_directory
function 10_test_bakepath_directory () {
  bake_echo_green "This tests that setting a directory Bakepath works appropriately"
  tasks=(a b c)
  paths=(a a/b a/b/c)
  for i in "${!tasks[@]}"; do
    task_result=$(BAKEFILE="$PWD/sub" ../bake "bar_task_${tasks[$i]}")
    if [ "$task_result" = "bar_task_${tasks[$i]}" ]; then
      bake_echo_green "OK: found nested Bakefile in ${PWD}/sub/${paths[$i]}"
    else
      bake_echo_red "ERROR: did not find Bakefile from ${PWD}/sub/${paths[$i]}"
      return 1
    fi
  done
  bake_echo_green "This is after the bake directory call, if you see this then the test succeeded."
}

bake_test 11_test_bakepath_directory_impl
function 11_test_bakepath_directory_impl () {
  bake_echo_green "This tests that setting an implicit directory bake works appropriately"
  cd impl/dir
  local bakepath
  bakepath=$(bake_find_bakefile_impl);
  cd ../..
  if [[ "$bakepath" == "$(pwd)/impl/dir/bake" ]]; then
    bake_echo_green "OK: found bake dir from $(pwd)"
  else
    bake_echo_red "ERROR: did not find bake dir from $(pwd)"
    return 1
  fi
}

bake_test 12_test_bakepath_file_impl
function 12_test_bakepath_file_impl () {
  bake_echo_green "This tests that setting an implicit Bakefile works appropriately"
  cd impl/file
  local bakepath
  bakepath=$(bake_find_bakefile_impl);
  cd ../..
  if [[ "$bakepath" == "$(pwd)/impl/file/Bakefile" ]]; then
    bake_echo_green "OK: found Bakefile from $(pwd)"
  else
    bake_echo_red "ERROR: did not find Bakefile from $(pwd)"
    return 1
  fi
}

bake_test 13_local_require_support
function 13_local_require_support () {
  # NB: the other tests already test local requires
  # here we only need to test realtive and absolute path'd requires
  # fully pathed
  bake_require "$(bake_bakefile_dir)/lib/mylib.sh"
  # relatively pathed
  bake_require "../test/lib/mylib.sh"
}

bake_task all
function all () {
  bake_log_level fatal
  local debug="${1:-}"
  if [ -n "$debug" ]; then
    set -x
  fi
  local failed=""
  local passed=""
  for test in $TESTS; do
    bake_log_debug "running $test"
    if $test; then
      passed="$passed $test"
      bake_echo_green "bake $test # OK"
    else
      failed="$failed $test"
      bake_echo_red "bake $test # FAILED"
    fi
  done
  if [ -z "$failed" ]; then
    bake_echo_green "All tests passed"
  fi
}
